/**
 * e-commerce-service
 * API documentation for the e-commerce-service
 *
 * OpenAPI spec version: v1
 * Contact: placeholder@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CartItemRequestDTO } from '../model/cartItemRequestDTO';
import { CartItemResponseDTO } from '../model/cartItemResponseDTO';
import { CartRequestDTO } from '../model/cartRequestDTO';
import { CartResponseDTO } from '../model/cartResponseDTO';
import { ProblemDetails } from '../model/problemDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CartService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Deletes a cart.
     * 
     * @param cartId The ID of the cart.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdDelete(cartId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1CartsCartIdDelete(cartId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1CartsCartIdDelete(cartId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1CartsCartIdDelete(cartId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a cart.
     * 
     * @param cartId The ID of the cart.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdGet(cartId: string, observe?: 'body', reportProgress?: boolean): Observable<CartResponseDTO>;
    public apiV1CartsCartIdGet(cartId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartResponseDTO>>;
    public apiV1CartsCartIdGet(cartId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartResponseDTO>>;
    public apiV1CartsCartIdGet(cartId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CartResponseDTO>('get',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all items in a cart.
     * 
     * @param cartId The ID of the cart to get items from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdItemsGet(cartId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsGet(cartId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CartItemResponseDTO>>>;
    public apiV1CartsCartIdItemsGet(cartId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CartItemResponseDTO>>>;
    public apiV1CartsCartIdItemsGet(cartId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdItemsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CartItemResponseDTO>>('get',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}/items`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an item from a cart.
     * 
     * @param cartId The ID of the cart.
     * @param itemId The ID of the cart item to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdItemsItemIdDelete(cartId: string, itemId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1CartsCartIdItemsItemIdDelete(cartId: string, itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1CartsCartIdItemsItemIdDelete(cartId: string, itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1CartsCartIdItemsItemIdDelete(cartId: string, itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdItemsItemIdDelete.');
        }

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling apiV1CartsCartIdItemsItemIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}/items/${encodeURIComponent(String(itemId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific item in a cart.
     * 
     * @param cartId The ID of the cart.
     * @param itemId The ID of the cart item.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdItemsItemIdGet(cartId: string, itemId: string, observe?: 'body', reportProgress?: boolean): Observable<CartItemResponseDTO>;
    public apiV1CartsCartIdItemsItemIdGet(cartId: string, itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsItemIdGet(cartId: string, itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsItemIdGet(cartId: string, itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdItemsItemIdGet.');
        }

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling apiV1CartsCartIdItemsItemIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CartItemResponseDTO>('get',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}/items/${encodeURIComponent(String(itemId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an item in a cart.
     * 
     * @param cartId The ID of the cart.
     * @param itemId The ID of the cart item to update.
     * @param body The cart item data transfer object containing updated product ID, quantity, and price.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdItemsItemIdPut(cartId: string, itemId: string, body?: CartItemRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CartItemResponseDTO>;
    public apiV1CartsCartIdItemsItemIdPut(cartId: string, itemId: string, body?: CartItemRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsItemIdPut(cartId: string, itemId: string, body?: CartItemRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsItemIdPut(cartId: string, itemId: string, body?: CartItemRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdItemsItemIdPut.');
        }

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling apiV1CartsCartIdItemsItemIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CartItemResponseDTO>('put',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}/items/${encodeURIComponent(String(itemId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds an item to a cart.
     * 
     * @param cartId The ID of the cart to add the item to.
     * @param body The cart item data transfer object containing product ID, quantity, and price.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdItemsPost(cartId: string, body?: CartItemRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CartItemResponseDTO>;
    public apiV1CartsCartIdItemsPost(cartId: string, body?: CartItemRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsPost(cartId: string, body?: CartItemRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartItemResponseDTO>>;
    public apiV1CartsCartIdItemsPost(cartId: string, body?: CartItemRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdItemsPost.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CartItemResponseDTO>('post',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}/items`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing cart.
     * 
     * @param cartId The ID of the cart user.
     * @param body The cart data transfer object containing the updated total amount.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsCartIdPut(cartId: string, body?: CartRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CartResponseDTO>;
    public apiV1CartsCartIdPut(cartId: string, body?: CartRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartResponseDTO>>;
    public apiV1CartsCartIdPut(cartId: string, body?: CartRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartResponseDTO>>;
    public apiV1CartsCartIdPut(cartId: string, body?: CartRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling apiV1CartsCartIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CartResponseDTO>('put',`${this.basePath}/api/v1/carts/${encodeURIComponent(String(cartId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new shopping cart.
     * 
     * @param body The cart data transfer object containing user ID and total amount.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CartsPost(body?: CartRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CartResponseDTO>;
    public apiV1CartsPost(body?: CartRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CartResponseDTO>>;
    public apiV1CartsPost(body?: CartRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CartResponseDTO>>;
    public apiV1CartsPost(body?: CartRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CartResponseDTO>('post',`${this.basePath}/api/v1/carts`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
